


\section{Evaluation}

\section{Discussion}



\section{Conclusion}


The growing awareness of ``Computational Thinking'' as a 21\textsuperscript{st} century competency increasingly requires that computation be positioned in a university's general education curriculum \cite{wing2006computational}.
The long-term vision is that, eventually, Computational Thinking will not be considered as a ``non-major course'' taught by Computer Science.
Instead, it will be solidly embedded within all majors, with well-defined courses on computational biology, computational art, computational psychology, and many others.
These students suffer from low self-efficacy and have poor or inaccurate attitudes towards computing.
For this vision to become a reality, computing educators must introduce Computational Thinking to students with no prior computing experience and motivate them to learn the material.
Critically, instruction must scale with the massive quantities of learners that will be starting with computation.
Even as we desperately train high school teachers to meet the demands of the CS10K projects, universities are demanding computational thinking courses for all their non-CS undergraduates.
Introductory programming environments must therefore
\begin{enumerate}
	\item Motivate learners who have a diverse background and needs.
	\item Support large number of learners with minimal human interaction.
\end{enumerate}

\subsection{Technological Support}

A historically successful approach to gently introducing students to programming is block-based programming, such as Scratch and its successor Snap!.
These environments introduce high-level programming concepts by having students connect blocks representing programming constructs in order to avoid syntactical barriers -- grammatically-incorrect combinations are forbidden by the design of the system.
Although equivalent in computational power, block-based languages have long been known to be unsuitable for professional developers because of their failure to scale and their inflexibilty. 
And yet, instructional design dictates that the learning context should match the performance context as closely as possible to ensure transfer.
Therefore, a recent criticism of this approach is that transferring students from a block-based language to a traditional text-based language is a non-trivial problem that must be studied closely.

\subsection{Motivational Support}

In order to identify how students become motivated to learn, we explore the problem from the perspective of the MUSIC Model of Academic Motivation -- despite the name, it is unrelated to music, instead being a meta-theory of motivation developed specifically for motivation in education.
The MUSIC model is a well-supported theory that identifies five key constructs in motivating students :

The premise of the MUSIC model is that one or more of these constructs must be sufficiently activated in order for a student to be intrinsically motivated, which increases their chances of succeeding.
Learners are individuals with their own predispositions and drives -- it is unlikely that motivational pedagogies can be one-size fit all.


\section{Approach}

\begin{figure}
\label{fig-full-kennel}
\epsfig{file=images/full-kennel.eps, width=\linewidth}
\caption{A full view of an embedded Kennel problem.}
\end{figure}

We submit big data as an answer to teach Computer Science and Computational Thinking, separating the material into context and content.
Big data provides an authentic, useful context for both kinds of students, since using it is something that almost all fields are beginning to find relevant.
Additionally, it is readily possible to find data sources that connect to the world around the student and their past experiences, establishing a sense of personalized interest.
When students inevitably ask, ``What am I going to be using this for?'', it is possible to point to well-defined  big data problems in their field requiring computation; the rhetroic is still needed, since the students are still novices, but there is no necessity to lie or exaggerate the usefulness \cite{guzdial2006imagineering}.


Python is a popular choice for introductory programming because it  has a lightweight syntax [Guo paper]


Research questions:

How can the system promote transfer

How to create a motivating programming environment

How do students use the block-based programming environment

Situated Learning, authentic learning through big data.

Support constructivist problems and more typical problems

Mastery learning to encourage multiple attempts

The block-based environment directly supports the core features of course by only exposing the subset of python that supports the material. In our model of computational thinking:
\begin{itemize}
	\item Abstraction is the method by which real-world entities are encoded in a computer, according to a stakeholder's context.
	\item Decisions allow programs
	\item Iteration
\end{itemize}

There are many limitations to the particular model of Computational Thinking used in this course, and a full discussion of its merits are outside the scope of this paper. We refer the reader to [Kafura citation] for a complete description of the course. Instead, we focus on how the design of the programming model can support the pedagogical goals of the course.

\section{Kennel}

In this section of the paper, we introduce our new online programming environment named Kennel.
The goal of Kennel is to be a beginner-friendly programming environment that scaffolds the learner into maturity while supporting a number of theory-driven, pedagogical objectives.
Internally, Kennel uses a modified version of the open-source Blockly library to handle the block editor, a modified version of the open-source Skulpt library to execute python code, and an unmodified version of the open-source CodeMirror library to handle the text editor.
The system promotes the transfer process by supporting Mutual Language Transformation between Blockly and Python -- at any time, code can be transferred back-and-forth between the block editor and the text editor.
This transfer is highly optimized so that there is no usability delay in observing the differences between blocks and text.

The Skulpt execution environment resides entirely within the users' browser, so there is no reliance on an external server. This includes a built-in, client-side Property Explorer to support program and data visualization. This execution environment supports a large number of native Python libraries, including custom ones developed for Big Data analysis. The long-term goal of this project is to support a useful set of rich libraries so that sophisticated applications can be developed -- going beyond traditional console-based problems. In this sense, the project is similar to other Skulpt-based environments such as Pythy and CodeSkulptor. However, Kennel seeks to maintain 100\% compatibility with existing Python APIs so that all code written is authentic.

Kennel is not just a code-authoring environment but also a system for guided practice. Instructors can create problems with interactive feedback. As students complete and struggle with milestones within the problem, they can be given just-in-time feedback, support, and encouragement. As they complete problems, this data can be reported to an interested central location, suitable for grading and course completion information. The system also tracks a number of events and user interactions for fine-grained analysis.

\subsection{Mutual Language Translation}

\begin{figure}
\label{fig-mlt-overview}
\psfig{file=images/graphics.ps, width=\linewidth}
\caption{The flow of code in the Mutual Language Translation system}
\end{figure}

The largest novel technical contribution of this project is the Mutual Language Translation between Blockly and Python.
Figure \ref{fig-mlt-overview} gives an overview of the flow of code in the environment, and figures \ref{fig-example-blockly} and \ref{fig-example-python} demonstrate the near-equivalency of the output of the two code editors.
Blockly outputs valid python source code, which can be passed into Skulpt in order to retrieve a JSON representation of the Abstract Syntax Tree.
Alternatively, the Python source of the Skulpt program can be edited directly by the user. 
Either way, this AST is parsed using our Py2Block library in order to generate an XML representation that Blockly can transform into its blocks.

Blockly already supports compilation of its blocks to Python, JavaScript, and Dart.
However, this multiple language support comes at a cost of reduced isomorphism - each language has different syntax for their common operations, and it is impossible to create a fully-featured block language with a one-to-one mapping between them.
For example, JavaScript has no support for parallel assignment, a commonly-used feature in Python, while Python does not have increment or decrement operators.

Instead of trying to satisfy multiple languages, we have dropped support for JavaScript in favor of a more full-featured mapping to Python.
Most of the changes are minor details that introduce pythonic syntax details: functions blocks are labeled ``define'', assignment blocks have an ``='' operator, the ``add item to list'' block is renamed to ``append''.
Blockly has been extended with new language features to include support for creating and retrieving dictionaries.
Globals - not useful in a CS course, students shouldn't write functions that affect global scope

Eventually, the interface should offer a complete isomorphic mapping to Python - however, there are a number of complications to resolve before that can occur.
For instance, Python uses square brackets for both list indexing and dictionary access.
There is a strong desire to differentiate between these distinctive types of access, visible in the block view as two distinct kinds of blocks (``get ith element of list'' vs. ``get key from dict'' blocks).
However, depending on what features of python are supported, it can be difficult or even impossible to statically identify the usage of a given pair of brackets -- instead, dynamic analysis needs to be combined with abstract interpretation techniques, such as those used in PySonar .  %TODO: CITE
Typically these systems suffer from state explosion due to the large number of metaprogramming techniques usable in a python programmer - however, they are uniquely suitable for an educational environment due to the reduced subset of Python needed in practice by beginners.

A less technical and more user-oriented question is how many language details should be exposed, and what rate.
A rarely used feature of ``for'' loops in Python is to contain an ``else'' clause that is executed upon successful completion of the loop (that is, when it is not prematurely escaped using a ``break'' statement).
This advanced language feature is meant to draw special attention to connected actions that must be performed after the iteration is completed.
If an ``else'' clause were made available to beginners first trying to grapple with iteration, it is likely they would confuse the concept with the conditional ``else'' clause used in ``if'' statements.
Cognitive Load Theory can be a harsh mistress for beginners, and the user interface needs to avoid exposing unnecessary details where possible.
It can be very difficult to recognize when the learner is ready to understand parallel assignment, and therefore able to specify multiple variables on the left side of an assignment block.
This is actually an advantage of traditional text-based environments, since they hide all advanced features by their very nature.
	
\subsection{Data Science Blocks}


Blockly and Python had a similar level of perceived usefulness

Student subverted the automatic checker

Tools do not replace instruction - students did not 

Was useful for identifying errors in problems early

Was useful in keeping the classroom manageable.

Some students reported the motivating remarks helpful, some reported them to be boring.

Some students felt that blockly took too long, some felt it wasn't long enough.

\section{Future Work}

Social sharing

full application development with Tkinter similar to CodeSkulptor. CodeSkulptor features its own API named SimpleGUI that is meant to be similar but distinct from TKinter, PIL, and Pygame \cite{Tang}. Unfortunately, this means that code cannot be transferred as a project matures, and existing TKinter examples cannot be used in the browser.

more sophisticated data analysis - more visualizations, free form data integration

Although the current user interface places a strong emphasis on the block-based programming, this isn't necessary - future versions will offer an alternative view with emphasis on the textual programming. By promoting the text authoring screen to the primary region of screen real-estate, the mental model of the learner should be affected.

What order do we show blocks?

Can we model students' frustration, can we make the system more friendly? Suggest when they should take a break?